<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://franbarreneche.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://franbarreneche.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-06-24T08:08:59+00:00</updated><id>https://franbarreneche.github.io/feed.xml</id><title type="html">blank</title><subtitle>Information about me, Francisco Barreneche
</subtitle><entry><title type="html">Laravel trying deptrac</title><link href="https://franbarreneche.github.io/blog/2023/laravel-trying-deptrac/" rel="alternate" type="text/html" title="Laravel trying deptrac" /><published>2023-06-22T22:25:00+00:00</published><updated>2023-06-22T22:25:00+00:00</updated><id>https://franbarreneche.github.io/blog/2023/laravel-trying-deptrac</id><content type="html" xml:base="https://franbarreneche.github.io/blog/2023/laravel-trying-deptrac/"><![CDATA[<p>A few days ago, I was testing a tool for analyzing the structure of a project and enforcing certain rules, mainly related to dependencies.</p>

<p>The library in question is called deptrac, and its documentation can be found in the following link: <a href="https://qossmic.github.io/deptrac/">Link</a></p>

<p>This tool allows developers to specify the project’s structure in the form of layers using a YAML file. It then allows them to indicate the dependencies that exist (that are going to be rules the project should enforce) between the different layers.</p>

<p>After installing it, I tried running it on an existing project at the company where I am currently working. For this purpose, I created a deptrac.yaml file in the root of the Laravel project, that contains the following structure and rules:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">deptrac</span><span class="pi">:</span>
  <span class="na">paths</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./app</span>
  <span class="na">layers</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Controller</span>
      <span class="na">collectors</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">className</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">.*Controller.*</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Repository</span>
      <span class="na">collectors</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">className</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">.*Repository.*</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Service</span>
      <span class="na">collectors</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">className</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">.*Service.*</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Model</span>
      <span class="na">collectors</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">directory</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s">.*Models*</span>
  <span class="na">ruleset</span><span class="pi">:</span>
    <span class="na">Controller</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">Service</span>
    <span class="na">Service</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">Repository</span>
    <span class="na">Repository</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">Model</span>
    <span class="na">Model</span><span class="pi">:</span> <span class="s">~</span>
</code></pre></div></div>

<p>Next, I used the following command to generate a report that provides information about rule violations:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php vendor/bin/deptrac analyse
</code></pre></div></div>

<p>This command analyzes the project’s structure based on the rules defined in the deptrac.yaml file and generates a report highlighting any violations found.</p>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-report.JPG-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-report.JPG-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-report.JPG-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-report.JPG" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>

<p>Finally, I used the tool to generate an image that visualizes the dependencies between different layers, with red lines indicating violations of the rules defined in the YAML file.</p>

<p>The specific command used to generate this image depends on the configuration and options of the deptrac tool. However, a common command to generate the image could be:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php vendor/bin/deptrac <span class="nt">--formatter</span><span class="o">=</span>graphviz-display
</code></pre></div></div>

<div class="row mt-3">
    <div class="col-sm mt-3 mt-md-0">
        <figure>

  <picture>
    
    <source class="responsive-img-srcset" media="(max-width: 480px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-image-480.webp" />
    <source class="responsive-img-srcset" media="(max-width: 800px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-image-800.webp" />
    <source class="responsive-img-srcset" media="(max-width: 1400px)" srcset="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-image-1400.webp" />
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/2023-06-22-laravel-trying-deptrac/deptrac-image.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

    </div>
</div>]]></content><author><name></name></author><category term="code" /><category term="laravel" /><category term="php" /><category term="deptract" /><summary type="html"><![CDATA[Deptrac, a great php tool]]></summary></entry><entry><title type="html">Laravel typehinting collections</title><link href="https://franbarreneche.github.io/blog/2023/laravel-typehinting-collections/" rel="alternate" type="text/html" title="Laravel typehinting collections" /><published>2023-06-21T23:30:00+00:00</published><updated>2023-06-21T23:30:00+00:00</updated><id>https://franbarreneche.github.io/blog/2023/laravel-typehinting-collections</id><content type="html" xml:base="https://franbarreneche.github.io/blog/2023/laravel-typehinting-collections/"><![CDATA[<p>As it has become popular lately, it is very common nowadays to add type hints to class attributes, function parameters, and return types.</p>

<p>Since PHP currently doesn’t have support for generics, we can only indicate that a variable is of type “Collection” but there is no way with the current type system to specify what type of data is contained within that collection.</p>

<p>One way to avoid this language limitation is to provide data type annotations using PHP Doc comments, in order to provide additional information to the IDE about the data type.</p>

<p>Here’s an example:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="kt">Collection</span> <span class="nv">$dontKnowWhatIsInside</span><span class="p">;</span>
    <span class="cd">/** @var Collection&lt;int,CustomType1&gt; */</span>
    <span class="k">protected</span> <span class="kt">Collection</span> <span class="nv">$knowWhatIsInside1</span><span class="p">;</span>
    <span class="cd">/** @var Collection&lt;string,CustomType2&gt; */</span>
    <span class="k">protected</span> <span class="kt">Collection</span> <span class="nv">$knowWhatIsInside2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The same problem arises when trying to provide information about the data type contained within a regular PHP array, and similarly, PHP Doc comments can be used to provide this information even allowing the use of data types that are unions.</p>

<p>Here’s an example:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$dontKnowWhatIsInside</span><span class="p">;</span>
    <span class="cd">/** @var CustomType1[] */</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$knowWhatIsInside1</span><span class="p">;</span>
    <span class="cd">/** @var array&lt;CustomType2|null&gt; */</span>
    <span class="k">protected</span> <span class="kt">array</span> <span class="nv">$knowWhatIsInside2</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="code" /><category term="laravel" /><category term="php" /><category term="collections" /><category term="array" /><summary type="html"><![CDATA[A small tip to help you IDE]]></summary></entry><entry><title type="html">Angular new control syntax</title><link href="https://franbarreneche.github.io/blog/2023/angular-new-control-syntax/" rel="alternate" type="text/html" title="Angular new control syntax" /><published>2023-06-20T21:15:00+00:00</published><updated>2023-06-20T21:15:00+00:00</updated><id>https://franbarreneche.github.io/blog/2023/angular-new-control-syntax</id><content type="html" xml:base="https://franbarreneche.github.io/blog/2023/angular-new-control-syntax/"><![CDATA[<p>A new RFC has been submitted in the GitHub discussions of the Angular project.</p>

<p>You can find it at the following link: <a href="https://github.com/angular/angular/discussions/50719">Link</a></p>

<p>The RFC introduces a proposal for a new control flow syntax, which represents a substantial change to how the framework handles control flow.</p>

<p>Below is the proposed syntax for an “if” block:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{#if cond.expr}
  Main case was true!
{:else if other.expr}
  Extra case was true!
{:else}
  False case!
{/if}
</code></pre></div></div>

<p>Proposed syntax for a “switch” block:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{#switch cond.kind}
  {:case x}
    X case
  {:case y}
    Y case
  {:case z}
    Z case
  {:default}
    No case matched
{/switch}
</code></pre></div></div>

<p>Finally, proposed syntax for a “for” block:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{#for item of items; track item.id}
  item
{:empty}
  There were no items in the list.
{/for}
</code></pre></div></div>

<p>Please note that the syntax provided is just an example based on the information given. For more details and a comprehensive understanding of the proposed syntax, it is recommended to refer to the RFC document itself on the GitHub discussion page.</p>]]></content><author><name></name></author><category term="code" /><category term="angular" /><category term="rfc" /><summary type="html"><![CDATA[New ways to write your templates!]]></summary></entry></feed>